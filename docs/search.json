[{"path":"https://go-bayes.github.io/margot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Bulbulia. Maintainer.","code":""},{"path":"https://go-bayes.github.io/margot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bulbulia JA (2024). margot: MARGinal Observational Treatment-effects.","code":"@Manual{,   title = {margot: MARGinal Observational Treatment-effects},   author = {Joseph A Bulbulia},   year = {2024},   website = {https://go-bayes.github.io/margot/}, }"},{"path":"https://go-bayes.github.io/margot/index.html","id":"margot","dir":"","previous_headings":"","what":"This package offers a gentle introduction to R","title":"This package offers a gentle introduction to R","text":"MARGinal Observational Treatment-effects.1 Causal inference requires balance across treatments compared. observational studies, balance guaranteed. goal margot enhance accessibility causal inference. primary audience includes psychological scientists, although may benefit social scientists. package offers functions : evaluating causal assumptions modelling time-series data reporting results performing sensitivity analyses margot focuses streamlining estimation (Marginal) Average Treatment Effects, also supports workflows Conditional Average Treatment Effects, Heterogeneous Treatment Effects, Modified Treatment Policies. version package work progress experimental.","code":""},{"path":"https://go-bayes.github.io/margot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"This package offers a gentle introduction to R","text":"can install development version margot like :","code":"if (!require(devtools, quietly = TRUE)) {   install.packages(\"devtools\")   library(devtools) }  devtools::install_github(\"go-bayes/margot\")"},{"path":"https://go-bayes.github.io/margot/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"This package offers a gentle introduction to R","text":"","code":"library(\"margot\")  # create transition table to evaluate the positivity assumption transition_matrix <- create_transition_matrix(df_nz, \"religion_believe_god\", \"id\")  # create table and table explanation table_change_belief <- transition_table(transition_matrix) table_change_belief"},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create transition matrix for state transitions — create_transition_matrix","title":"Create transition matrix for state transitions — create_transition_matrix","text":"satisify positivity assumption causal inference, must ensure exposure occurs data. function computes transition matrix given state variable across subjects, tracking changes consecutive observations. function handles numeric factor state variables, excluding NA values transition count.","code":""},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create transition matrix for state transitions — create_transition_matrix","text":"","code":"create_transition_matrix(data, state_var, id_var)"},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create transition matrix for state transitions — create_transition_matrix","text":"data data frame containing observations. state_var name state variable column `data` string. variable tracks state changes analyzed. id_var name identifier variable column `data` string. variable distinguishes different subjects entities.","code":""},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create transition matrix for state transitions — create_transition_matrix","text":"matrix indicating number transitions states. rows represent initial state (''), columns represent subsequent state (''). Diagonal entries indicate number times state change, -diagonal entries indicate transitions one state another.","code":""},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create transition matrix for state transitions — create_transition_matrix","text":"function explicitly excludes NA values transition matrix calculation. treats numeric state variables converting factors, ensuring consistent analysis approach numeric factor types.","code":""},{"path":"https://go-bayes.github.io/margot/reference/create_transition_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create transition matrix for state transitions — create_transition_matrix","text":"","code":"df <- read.table(header=TRUE, text=\" id wave year_measured religion_believe_god 3 0 1 0 3 1 1 1 4 0 1 0 4 1 1 1 5 0 1 1 5 1 1 0\")  transition_matrix <- create_transition_matrix(df, \"religion_believe_god\", \"id\") print(transition_matrix) #>     to #> from 0 1 #>    0 0 2 #>    1 1 0"},{"path":"https://go-bayes.github.io/margot/reference/margot_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform longitudinal data to wide format with labels — margot_wide","title":"Transform longitudinal data to wide format with labels — margot_wide","text":"function transforms longitudinal data long format wide format, ensuring baseline measurements correctly labelled included. handles multiple observations per subject across different waves, allows specification baseline variables, exposure variables, outcome variables. ensures specified variables included resulting wide-format data frame, columns prefixed time measurement.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform longitudinal data to wide format with labels — margot_wide","text":"","code":"margot_wide(.data, baseline_vars, exposure_var, outcome_vars)"},{"path":"https://go-bayes.github.io/margot/reference/margot_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform longitudinal data to wide format with labels — margot_wide","text":".data data frame containing longitudinal data long format. baseline_vars character vector baseline variable names included t0. exposure_var character vector exposure variable names tracked across time. outcome_vars character vector outcome variable names tracked across time.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform longitudinal data to wide format with labels — margot_wide","text":"wide-format data frame subject's observations across time points         represented single row, variables prefixed respective         time measurement.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform longitudinal data to wide format with labels — margot_wide","text":"","code":"# Defining variables as per the function's documentation baseline_vars <- c(   \"male\", \"age\",  \"eth_cat\",   \"partner\", \"agreeableness\",   \"conscientiousness\", \"extraversion\", \"honesty_humility\",   \"openness\", \"neuroticism\", \"sample_weights\" )  exposure_var <- c(\"forgiveness\")  outcome_vars <- c(   \"alcohol_frequency\", \"alcohol_intensity\",   \"hlth_bmi\", \"hours_exercise\" )  # df_nz is a synthetic dataset included in this package # wide_data <- margot_wide(df_nz, baseline_vars, exposure_var, outcome_vars) # print(wide_data)"},{"path":"https://go-bayes.github.io/margot/reference/margot_wide_impute_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","title":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","text":"function transforms longitudinal data wide format performs imputation baseline variables. leverages `mice` package imputation, ensuring missing baseline data appropriately handled. function arranges data participant id time, filters based time conditions, reshapes data wide format. Imputed data merged back, maintaining structure suitable analysis.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide_impute_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","text":"","code":"margot_wide_impute_baseline(.data, baseline_vars, exposure_var, outcome_vars)"},{"path":"https://go-bayes.github.io/margot/reference/margot_wide_impute_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","text":".data dataframe containing longitudinal data. baseline_vars character vector baseline variable names include impute necessary. exposure_var character vector specifying names exposure variables. outcome_vars character vector specifying names outcome variables.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide_impute_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","text":"data frame wide format imputed baseline variables.","code":""},{"path":"https://go-bayes.github.io/margot/reference/margot_wide_impute_baseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform to wide data with labels and impute baseline missing values — margot_wide_impute_baseline","text":"","code":"# df_nz is a synthetic dataset included in this package data(df_nz, package = \"margot\")  df_nz <- data.frame(df_nz) wide_data_imputed <- margot_wide_impute_baseline(df_nz,   baseline_vars = c(\"age\", \"male\", \"religion_believe_god\"),   exposure_var = (\"forgiveness\"),   outcome_vars = (\"kessler_latent_anxiety\")   ) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Loading required package: tidyr"},{"path":"https://go-bayes.github.io/margot/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://go-bayes.github.io/margot/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://go-bayes.github.io/margot/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://go-bayes.github.io/margot/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://go-bayes.github.io/margot/reference/transition_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition Table — transition_table","title":"Transition Table — transition_table","text":"Generates transition table describes movements stability states one observation next. formats output markdown table, highlighting number entities remaining state (diagonal) transitioning different states (-diagonal).","code":""},{"path":"https://go-bayes.github.io/margot/reference/transition_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition Table — transition_table","text":"","code":"transition_table(data, state_names = NULL)"},{"path":"https://go-bayes.github.io/margot/reference/transition_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition Table — transition_table","text":"data data frame columns `` `` indicating initial subsequent states entities, respectively, `Freq` column indicating frequency transitions. state_names Optional; vector state names replace default state labels. NULL, states labeled \"State 1\", \"State 2\", etc., based unique values `` `` columns.","code":""},{"path":"https://go-bayes.github.io/margot/reference/transition_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition Table — transition_table","text":"list two elements: `explanation`, character string explaining table, `table`, markdown-formatted table transitions. diagonal entries (bold) represent count entities remained initial state, -diagonal entries show count transitions different states.","code":""},{"path":"https://go-bayes.github.io/margot/reference/transition_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition Table — transition_table","text":"","code":"df <- read.table(header=TRUE, text=\" id wave year_measured religion_believe_god 3 0 1 0 3 1 1 1 4 0 1 0 4 1 1 1 5 0 1 1 5 1 1 0\")  transition_matrix <- create_transition_matrix(df, \"religion_believe_god\", \"id\") # Assuming `transition_matrix` is a table with the transition counts between states # First, convert `transition_matrix` to a dataframe suitable for `transition_table` df_transition <- as.data.frame.matrix(transition_matrix) df_transition$from <- rownames(df_transition) long_df_transition <- tidyr::pivot_longer(df_transition, cols = -from, names_to = \"to\", values_to = \"Freq\")  transition_table_data <- transition_table(long_df_transition) cat(transition_table_data$explanation) #> The table presents a transition matrix to evaluate shifts in the treatment between the baseline wave and the treatment wave. Entries along the diagonal (in bold) indicate the number of individuals who **stayed** in their initial state. By contrast, the off-diagonal shows the transitions from the initial state (bold) to another state in the following wave (off diagnal). Thus cell located at the intersection of row $i$ and column $j$, where $i  #> eq j$, gives us the counts of individuals moving from state $i$ to state $j$. cat(\"\\n\") #>  print(transition_table_data$table) #>  #>  #> |  From   | State 0 | State 1 | #> |:-------:|:-------:|:-------:| #> | State 0 |  **0**  |    2    | #> | State 1 |    1    |  **0**  |"},{"path":"https://go-bayes.github.io/margot/news/index.html","id":"margot-010","dir":"Changelog","previous_headings":"","what":"margot 0.1.0","title":"margot 0.1.0","text":"Initial version.","code":""}]
