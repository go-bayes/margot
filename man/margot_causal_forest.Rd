% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot_causal_forest.R
\name{margot_causal_forest}
\alias{margot_causal_forest}
\title{Run Multiple Generalized Random Forest (GRF) Causal Forest Models with Enhanced Qini Cross-Validation}
\usage{
margot_causal_forest(
  data,
  outcome_vars,
  covariates,
  W,
  weights,
  grf_defaults = list(),
  save_data = FALSE,
  compute_rate = TRUE,
  top_n_vars = 15,
  save_models = TRUE,
  train_proportion = 0.5,
  qini_split = TRUE,
  train_prop = 0.5,
  qini_train_prop = NULL,
  compute_conditional_means = TRUE,
  verbose = TRUE,
  qini_treatment_cost = 1,
  seed = 12345
)
}
\arguments{
\item{data}{A data frame containing all necessary variables.}

\item{outcome_vars}{A character vector of outcome variable names to be modelled.}

\item{covariates}{A matrix of covariates to be used in the GRF models.}

\item{W}{A vector of binary treatment assignments.}

\item{weights}{A vector of weights for the observations.}

\item{grf_defaults}{A list of default parameters for the GRF models.}

\item{save_data}{Logical indicating whether to save data, covariates, and weights. Default is FALSE.}

\item{compute_rate}{Logical indicating whether to compute RATE for each model. Default is TRUE.
Note: Direct computation of RATE, QINI, and policy trees within this function may be 
deprecated in future versions. Use margot_rate(), margot_qini(), and margot_policy_tree() instead.}

\item{top_n_vars}{Integer specifying the number of top variables to use for additional computations. Default is 15.}

\item{save_models}{Logical indicating whether to save the full GRF model objects. Default is TRUE.}

\item{train_proportion}{Numeric value between 0 and 1 indicating the proportion of non-missing data to use for
training policy trees. Default is 0.5.}

\item{qini_split}{Logical indicating whether to do a separate train/test split exclusively for the Qini
calculation. Default is TRUE (i.e., Qini is computed out-of-sample).}

\item{train_prop}{Proportion of data to use for the training set when qini_split=TRUE. Default is 0.5.}

\item{qini_train_prop}{Deprecated. Use train_prop instead. If provided, will override train_prop with a warning.}

\item{compute_conditional_means}{Logical indicating whether to compute conditional means using
\code{policytree::conditional_means()}. These represent expected outcomes under each treatment arm. Default is TRUE.}

\item{verbose}{Logical indicating whether to display detailed messages during execution. Default is TRUE.}

\item{qini_treatment_cost}{Scalar treatment cost per unit for QINI calculations. Default 1.
Lower values (e.g., 0.2) represent cheap treatments creating steeper QINI curves;
higher values (e.g., 5) represent expensive treatments creating shallower curves.}

\item{seed}{Integer. Random seed for reproducibility of train/test splits for policy trees 
and QINI evaluation. Default is 12345.}
}
\value{
A list containing:
  * `results` - per-outcome diagnostics and objects
  * `combined_table` - combined e-value table across outcomes
  * `outcome_vars` - vector of outcome names
  * `not_missing` - indices of complete-case rows
  * (`data`, `covariates`, `weights`, `W`) when `save_data = TRUE`
  * `full_models` when `save_models = TRUE`
}
\description{
This function runs multiple GRF causal forest models with enhanced features. In addition to estimating
causal effects, it can compute the Rank-Weighted Average Treatment Effect (RATE) for each model. It also
gives you the option to train a separate "Qini forest" on a subset of data and compute Qini curves on
held-out data, thereby avoiding in-sample optimism in the Qini plots.
}
