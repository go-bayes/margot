% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot_batch_policy.R
\name{margot_batch_policy}
\alias{margot_batch_policy}
\title{Apply Policy Tree Analysis to Multiple Models}
\usage{
margot_batch_policy(
  result_outcomes,
  policy_tree_args = list(),
  decision_tree_args = list(),
  dpi = 300,
  width = 12,
  height = 12,
  save_plots = TRUE,
  output_dir = push_mods,
  spend = 0.2
)
}
\arguments{
\item{result_outcomes}{A list containing the results of multiple models.
This object should have a structure similar to the output of a multi-arm
causal forest model, with a `results` element containing named model results.}

\item{policy_tree_args}{A list of arguments to be passed to `margot_plot_policy_tree()`.}

\item{decision_tree_args}{A list of arguments to be passed to `margot_plot_decision_tree()`.}

\item{dpi}{The resolution in dots per inch for saved plots. Default is 600.}

\item{width}{The width of the saved plots in inches. Default is 12.}

\item{height}{The height of the saved plots in inches. Default is 12.}

\item{save_plots}{Logical; if TRUE, plots will be saved to disk. Default is TRUE.}

\item{output_dir}{The directory where plots should be saved. Default is "push_mods".}

\item{spend}{A numeric value between 0 and 1 specifying the spend level for difference gain calculations. Default is 0.2.}
}
\value{
A list where each element corresponds to a model in the input
  `result_outcomes`. Each element is itself a list containing:
  \item{policy_tree_plot}{A ggplot object of the policy tree plot}
  \item{policy_tree_interpretation}{A character string interpreting the policy tree}
  \item{qini_plot}{A ggplot object of the Qini plot}
  \item{decision_tree_visualisation}{A ggplot object visualizing the decision tree}
  \item{policy_combo_plot}{A ggplot object of the policy combo plot}
  \item{diff_gain_summary}{For binary treatments, a list containing difference gain summary}
  \item{diff_gain_summaries}{For multi-arm treatments, a list of difference gain summaries for each arm and all_arms}
}
\description{
This function applies policy tree analysis to multiple models contained within a single
results object. It generates policy tree plots, interpretations, Qini plots, decision tree
visualizations, policy combo plots, and difference gain summaries for each model. It also
provides options for saving the generated plots.
}
\examples{
\dontrun{
# Example for binary treatment
binary_results <- margot_batch_policy(
  result_outcomes = cf_results,
  policy_tree_args = list(point_alpha = 0.7),
  decision_tree_args = list(text_size = 4),
  dpi = 300,
  width = 12,
  height = 10,
  save_plots = TRUE,
  output_dir = "output_plots_binary",
  spend = 0.2
)

# Access results for a specific binary model
binary_model_results <- binary_results$model_t2_binary
print(binary_model_results$diff_gain_summary$summary)

# Example for multi-arm treatment
multi_arm_results <- margot_batch_policy(
  result_outcomes = mc_results,
  policy_tree_args = list(point_alpha = 0.7),
  decision_tree_args = list(text_size = 4),
  dpi = 300,
  width = 12,
  height = 10,
  save_plots = TRUE,
  output_dir = "output_plots_multi_arm",
  spend = 0.2
)

# Access results for a specific multi-arm model
multi_arm_model_results <- multi_arm_results$model_t2_multi_arm
print(multi_arm_model_results$diff_gain_summaries$all_arms$summary)
print(multi_arm_model_results$diff_gain_summaries$arm1$summary)

# The plots are saved in the specified output directories
# You can also access the plot objects directly:
print(binary_model_results$policy_tree_plot)
print(multi_arm_model_results$qini_plot)
}

}
