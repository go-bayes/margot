% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot_batch_policy.R
\name{margot_batch_policy}
\alias{margot_batch_policy}
\title{Apply Policy Tree Analysis to Multiple Models}
\usage{
margot_batch_policy(
  result_outcomes,
  policy_tree_args = list(),
  decision_tree_args = list(),
  ...
)
}
\arguments{
\item{result_outcomes}{A list containing the results of multiple models.
This object should have a structure similar to the output of a multi-arm
causal forest model, with a `results` element containing named model results.}

\item{policy_tree_args}{A list of arguments to be passed to `margot_plot_policy_tree()`.}

\item{decision_tree_args}{A list of arguments to be passed to `margot_plot_decision_tree()`.}

\item{...}{Additional arguments to be passed to `margot_policy_tree()`.}
}
\value{
A list where each element corresponds to a model in the input
  `result_outcomes`. Each element is itself a list containing:
  \item{policy_tree_plot}{A ggplot object of the policy tree plot}
  \item{policy_tree_interpretation}{A character string interpreting the policy tree}
  \item{qini_plot}{A ggplot object of the Qini plot}
  \item{decision_tree_visualisation}{A ggplot object visualizing the decision tree}
  \item{policy_combo_plot}{A ggplot object of the policy combo plot}
}
\description{
This function applies the `margot_policy_tree()` function to multiple models
contained within a single results object. It generates policy tree plots,
interpretations, Qini plots, decision tree visualizations, and policy combo
plots for each model.
}
\examples{
\dontrun{
# Assuming result_outcomes_health contains multiple model results
batch_results <- margot_batch_policy(
  result_outcomes_health,
  policy_tree_args = list(point_alpha = 0.7),
  decision_tree_args = list(text_size = 4)
)

# To access results for a specific model:
smoker_results <- batch_results$model_t2_smoker_binary

# To view the policy tree plot for this model:
print(smoker_results$policy_tree_plot)
}

}
