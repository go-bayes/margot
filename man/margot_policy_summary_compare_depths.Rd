% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot_policy_summary_compare_depths.R
\name{margot_policy_summary_compare_depths}
\alias{margot_policy_summary_compare_depths}
\title{Compare Depth-1 vs Depth-2 Policy Summaries and Pick Best per Outcome}
\usage{
margot_policy_summary_compare_depths(
  object,
  model_names = NULL,
  original_df = NULL,
  se_method = c("plugin", "bootstrap"),
  R = 499L,
  seed = 42L,
  label_mapping = NULL,
  include_split_breakdown_1 = "branch",
  include_split_breakdown_2 = "leaf",
  auto_recommend = TRUE,
  dominance_threshold = 0.6,
  strict_branch = FALSE,
  restricted_scope_1 = "branch",
  restricted_scope_2 = "leaf",
  split_compact = TRUE,
  min_action_pct = 5,
  split_drop_zero = TRUE,
  split_top_only = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{object}{A `margot_stability_policy_tree` object with consensus trees for
depth 1 and/or depth 2 (run with `depth = "both"` in `margot_policy_tree_stability()`).}

\item{model_names}{Optional character vector of outcomes (with or without `model_`).}

\item{original_df}{Optional original-scale data for scale annotations (passed through).}

\item{se_method}{Character; "plugin" (default) or "bootstrap"; passed to reporter.}

\item{R}{Integer; bootstrap replicates when `se_method = "bootstrap"` (default 499).}

\item{seed}{Integer; RNG seed (default 42).}

\item{label_mapping}{Optional named list mapping outcome names to display labels.}

\item{include_split_breakdown_1}{Character; split view for depth 1 (default "branch").}

\item{include_split_breakdown_2}{Character; split view for depth 2 (default "leaf").}

\item{auto_recommend}{Logical; turn on automated restricted-policy recommendations (default TRUE).}

\item{dominance_threshold}{Numeric; see [margot_policy_summary_report()].}

\item{strict_branch}{Logical; see [margot_policy_summary_report()].}

\item{restricted_scope_1}{Character; restricted scope for depth 1 (default "branch").}

\item{restricted_scope_2}{Character; restricted scope for depth 2 (default "leaf").}

\item{split_compact}{Logical; pass-through to [margot_policy_summary_report()] controlling
whether compact split tables are generated (default TRUE).}

\item{min_action_pct}{Numeric; minimum treated/control share (%) required to keep
action-specific uplifts in compact tables (default 5). Lowering this can restore
split rows that would otherwise be suppressed.}

\item{split_drop_zero}{Logical; drop rows with zero contributions from compact tables (default TRUE).}

\item{split_top_only}{Logical; keep only the top-contributing split per model when building compact
tables (default FALSE).}

\item{verbose}{Logical; print progress (default TRUE).}
}
\value{
A list with:
  - depth1: result of [margot_policy_summary_report()] at depth 1
  - depth2: result of [margot_policy_summary_report()] at depth 2
  - compare_df: data.frame with PVc and CIs for depth 1 and 2 and selected depth
  - compare_md: markdown table rendering of `compare_df`
  - selected_depth_by_model: named character vector ("1" or "2")
  - recommended_model_ids: character vector of model identifiers recommended for deployment
  - recommended_model_names: corresponding human-readable outcome labels
  - best_summary: mixed-depth `margot_policy_summary_report()` result (if available)
  - model_depths: named integer vector with the depth chosen for each model
  - depth_map: convenience alias for `model_depths`
  - depth1_model_ids / depth1_model_names: models evaluated at depth 1 (ids with `model_` prefix)
  - depth2_model_ids / depth2_model_names: models evaluated at depth 2
  - recommended_depth1_model_ids / names: recommended models with depth 1 policies
  - recommended_depth2_model_ids / names: recommended models with depth 2 policies
}
\description{
Runs [margot_policy_summary_report()] twice (depth 1 and depth 2) with consistent
evaluation settings, then produces a side-by-side comparison of policy values vs
control-all and selects the preferred depth per outcome. By default, uses
se_method = "plugin" and turns on `auto_recommend` to obtain numeric PV and CIs.
}
