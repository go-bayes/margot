% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margot_trim_sample_weights.R
\name{margot_trim_sample_weights}
\alias{margot_trim_sample_weights}
\title{Standardise and (optionally) trim sample weights at both ends}
\usage{
margot_trim_sample_weights(
  weights_vec,
  lower_quantile = NULL,
  upper_quantile = 0.99
)
}
\arguments{
\item{weights_vec}{Numeric vector of sample weights.  Must be positive or NA.}

\item{lower_quantile}{Numeric in (0,1); all weights below this quantile will
be raised (“winsorised up”) to the lower quantile value.  If \code{NULL} or \code{<= 0},
lower‐end trimming is skipped.}

\item{upper_quantile}{Numeric in (0,1); all weights above this quantile will
be lowered (“winsorised down”) to the upper quantile value.  If \code{NULL} or \code{>= 1},
upper‐end trimming is skipped.}
}
\value{
A numeric vector the same length as \code{weights_vec}, with extremes
  winsorised and then rescaled to have mean 1.
}
\description{
This function first trims any weights below a specified lower‐quantile threshold
and/or above a specified upper‐quantile threshold, then standardises the
(possibly trimmed) weights to have a mean of 1.  Missing values are preserved.
}
\details{
Trimming both tails of inverse-probability weights can mitigate the influence
of implausibly small or large weights, trading a bit of bias for lower variance.
}
\examples{
set.seed(42)
w <- c(rlnorm(90, 0, 0.5), runif(5, 5, 20), runif(5, 0, 0.01), NA)
summary(w)

# trim both lower 1\% and upper 99\%, then standardise
w_both <- margot_trim_sample_weights(
  w,
  lower_quantile = 0.01,
  upper_quantile = 0.99
)
summary(w_both)

# only upper trim at 95th percentile
w_up95 <- margot_trim_sample_weights(w, lower_quantile = NULL, upper_quantile = 0.95)
summary(w_up95)

# only lower trim at 5th percentile
w_low5 <- margot_trim_sample_weights(w, lower_quantile = 0.05, upper_quantile = NULL)
summary(w_low5)

# no trimming (both NULL), only standardise
w_std <- margot_trim_sample_weights(w, lower_quantile = NULL, upper_quantile = NULL)
summary(w_std)

}
